type ReferenceWidget implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  hasHelpText: Boolean!
  readOnly: Boolean!
  reference: Reference!
  referenceValues: [ReferenceValue!]!
  referenceOptions: [ReferenceValue!]!
  style: ReferenceWidgetStyle
  ownerId: ID!
}

type ReferenceWidgetStyle {
  color: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type Reference {
  typeName: String!
  referenceKind: String!
  containment: Boolean!
  manyValued: Boolean!
}

type ReferenceValue {
  id: ID!
  label: String!
  kind: String!
  iconURL: String
  hasClickAction: Boolean!
}

extend type Mutation {
  editReference(input: EditReferenceInput): EditReferencePayload!
  clickReferenceValue(input: ClickReferenceValueInput!): ClickReferenceValuePayload!
  clearReference(input: ClearReferenceInput!): ClearReferencePayload!
  removeReferenceValue(input: RemoveReferenceValueInput!): RemoveReferenceValuePayload!
}

input EditReferenceInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  referenceWidgetId: ID!
  newValueIds: [ID!]!
}

union EditReferencePayload = SuccessPayload | ErrorPayload

input ClickReferenceValueInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  referenceWidgetId: ID!
  referenceValueId: ID!
  clickEventKind: ClickEventKind!
}

union ClickReferenceValuePayload = ErrorPayload | SuccessPayload

input ClearReferenceInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  referenceWidgetId: ID!
}

union ClearReferencePayload = ErrorPayload | SuccessPayload

input RemoveReferenceValueInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  referenceWidgetId: ID!
  referenceValueId: ID!
}

union RemoveReferenceValuePayload = ErrorPayload | SuccessPayload