extend type Subscription {
  formEvent(input: FormEventInput!): FormEventPayload!
  propertiesEvent(input: PropertiesEventInput!): PropertiesEventPayload!
  relatedElementsEvent(input: PropertiesEventInput!): PropertiesEventPayload!
  representationsEvent(input: RepresentationsEventInput!): RepresentationsEventPayload!
}

input FormEventInput {
  id: ID!
  editingContextId: ID!
  formId: ID!
}

input PropertiesEventInput {
  id: ID!
  editingContextId: ID!
  objectIds: [ID!]!
}

input RepresentationsEventInput {
  id: ID!
  editingContextId: ID!
  objectId: ID!
}

union FormEventPayload = ErrorPayload | FormRefreshedEventPayload | SubscribersUpdatedEventPayload | WidgetSubscriptionsUpdatedEventPayload

union PropertiesEventPayload = ErrorPayload | FormRefreshedEventPayload | SubscribersUpdatedEventPayload | WidgetSubscriptionsUpdatedEventPayload

union RepresentationsEventPayload = ErrorPayload | FormRefreshedEventPayload | SubscribersUpdatedEventPayload | WidgetSubscriptionsUpdatedEventPayload

type WidgetSubscriptionsUpdatedEventPayload {
  id: ID!
  widgetSubscriptions: [WidgetSubscription]!
}

type WidgetSubscription {
  widgetId: ID!
  subscribers: [Subscriber]!
}

type FormRefreshedEventPayload {
  id: ID!
  form: Form!
}

type Form implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  targetObjectId: ID!
  pages: [Page!]!
}

type Page {
  id: ID!
  label: String!
  toolbarActions: [ToolbarAction!]!
  groups: [Group!]!
}

type Group {
  id: ID!
  label: String!
  displayMode: GroupDisplayMode!
  toolbarActions: [ToolbarAction!]!
  widgets: [Widget!]!
}

enum GroupDisplayMode {
  LIST
  TOGGLEABLE_AREAS
}

interface Widget {
  id: ID!
  label: String!
  iconURL: String
  diagnostics: [Diagnostic!]!
}

type Checkbox implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  value: Boolean!
  style: CheckboxStyle
}

type CheckboxStyle {
  color: String
}

type List implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  items: [ListItem!]!
  style: ListStyle
}

type ListStyle {
  color: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}
type ListItem {
  id: ID!
  label: String!
  kind: String!
  imageURL: String!
  deletable: Boolean!
}

type MultiSelect implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  options: [SelectOption!]!
  values: [String]
  style: MultiSelectStyle
}

type MultiSelectStyle {
  backgroundColor: String
  foregroundColor: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type Radio implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  options: [RadioOption!]!
  style: RadioStyle
}

type RadioOption {
  id: ID!
  label: String!
  selected: Boolean!
}

type RadioStyle {
  color: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type Select implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  options: [SelectOption!]!
  value: String
  style: SelectStyle
}

type SelectOption {
  id: ID!
  label: String!
}

type SelectStyle {
  backgroundColor: String
  foregroundColor: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type Textarea implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  value: String!
  style: TextareaStyle
  supportsCompletion: Boolean
}

type TextareaStyle {
  backgroundColor: String
  foregroundColor: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type Textfield implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  value: String!
  style: TextfieldStyle
  supportsCompletion: Boolean
}

type TextfieldStyle {
  backgroundColor: String
  foregroundColor: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type LabelWidget implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  value: String!
  style: LabelWidgetStyle
}

type LabelWidgetStyle {
  color: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type Link implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  url: String!
  style: LinkStyle
}

type LinkStyle {
  color: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type Button implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  buttonLabel: String
  imageURL: String
  iconURL: String
  style: ButtonStyle
}

type ButtonStyle {
  backgroundColor: String
  foregroundColor: String
  fontSize: Int
  italic: Boolean
  bold: Boolean
  underline: Boolean
  strikeThrough: Boolean
}

type ToolbarAction implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  buttonLabel: String
  imageURL: String
  iconURL: String
  style: ButtonStyle
}

union Chart = BarChart | PieChart

type ChartWidget implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  chart: Chart!
}

type FlexboxContainer implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  flexDirection: String!
  flexWrap: String!
  flexGrow: Int!
  children: [Widget!]!
}

type TreeWidget implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  nodes: [TreeNode!]!
  expandedNodesIds: [ID!]!
}

type TreeNode {
  id: ID!
  parentId: ID
  label: String!
  kind: String!
  imageURL: String!
  selectable: Boolean!
}

type Image implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  url: String!
  maxWidth: String
}

type RichText implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  label: String!
  iconURL: String
  value: String!
}

type FormDescription implements RepresentationDescription {
  id: ID!
  label: String!
  completionProposals(widgetId: ID!, currentText: String!, cursorPosition: Int!): [CompletionProposal!]!
}

type CompletionProposal {
  description: String!
  textToInsert: String!
  charsToReplace: Int!
}

extend type Mutation {
  editCheckbox(input: EditCheckboxInput!): EditCheckboxPayload!
  editMultiSelect(input: EditMultiSelectInput!): EditMultiSelectPayload!
  editRadio(input: EditRadioInput!): EditRadioPayload!
  editSelect(input: EditSelectInput!): EditSelectPayload!
  editTextfield(input: EditTextfieldInput!): EditTextfieldPayload!
  editRichText(input: EditRichTextInput!): EditRichTextPayload!
  updateWidgetFocus(input: UpdateWidgetFocusInput!): UpdateWidgetFocusPayload!
  clickListItem(input: ClickListItemInput!): ClickListItemPayload!
  deleteListItem(input: DeleteListItemInput!): DeleteListItemPayload!
  pushButton(input: PushButtonInput!): PushButtonPayload!
}

input EditCheckboxInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  checkboxId: ID!
  newValue: Boolean!
}

union EditCheckboxPayload = ErrorPayload | SuccessPayload

input EditMultiSelectInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  selectId: ID!
  newValues: [String]!
}

union EditMultiSelectPayload = ErrorPayload | SuccessPayload

input EditRadioInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  radioId: ID!
  newValue: ID!
}

union EditRadioPayload = ErrorPayload | SuccessPayload

input EditSelectInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  selectId: ID!
  newValue: ID!
}

union EditSelectPayload = ErrorPayload | SuccessPayload

input EditTextfieldInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  textfieldId: ID!
  newValue: String!
}

union EditTextfieldPayload = ErrorPayload | SuccessPayload

input EditRichTextInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  richTextId: ID!
  newValue: String!
}

union EditRichTextPayload = ErrorPayload | SuccessPayload

input UpdateWidgetFocusInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  widgetId: ID!
  selected: Boolean!
}

union UpdateWidgetFocusPayload = ErrorPayload | UpdateWidgetFocusSuccessPayload

type UpdateWidgetFocusSuccessPayload {
  id: ID!
  updateFocusWidgetId: String!
}

input DeleteListItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  listId: ID!
  listItemId: ID!
}

union DeleteListItemPayload = ErrorPayload | SuccessPayload

input ClickListItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  listId: ID!
  listItemId: ID!
  clickEventKind: ClickEventKind!
}

enum ClickEventKind {
  SINGLE_CLICK
  DOUBLE_CLICK
}

union ClickListItemPayload = ErrorPayload | SuccessPayload

input PushButtonInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  buttonId: ID!
}

union PushButtonPayload = ErrorPayload | SuccessPayload
