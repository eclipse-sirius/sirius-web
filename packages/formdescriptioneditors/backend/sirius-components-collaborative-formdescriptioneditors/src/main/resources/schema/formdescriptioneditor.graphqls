extend type Subscription {
  formDescriptionEditorEvent(input: FormDescriptionEditorEventInput!): FormDescriptionEditorEventPayload!
}

input FormDescriptionEditorEventInput {
  id: ID!
  editingContextId: ID!
  formDescriptionEditorId: ID!
}

union FormDescriptionEditorEventPayload = ErrorPayload | FormDescriptionEditorRefreshedEventPayload

type FormDescriptionEditorRefreshedEventPayload {
  id: ID!
  formDescriptionEditor: FormDescriptionEditor!
}

type FormDescriptionEditor implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  pages: [Page!]!
}

type FormDescriptionEditorDescription implements RepresentationDescription {
  id: ID!
  label: String!
}

type FormDescriptionEditorFor implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  hasHelpText: Boolean!
  label: String!
  iconURL: [String!]!
  readOnly: Boolean!
  children: [Widget!]!
}

type FormDescriptionEditorIf implements Widget {
  id: ID!
  diagnostics: [Diagnostic!]!
  hasHelpText: Boolean!
  label: String!
  iconURL: [String!]!
  readOnly: Boolean!
  children: [Widget!]!
}

extend type Mutation {
  addGroup(input: AddGroupInput!): AddGroupPayload!
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload!
  moveGroup(input: MoveGroupInput!): MoveGroupPayload!
  addWidget(input: AddWidgetInput!): AddWidgetPayload!
  deleteWidget(input: DeleteWidgetInput!): DeleteWidgetPayload!
  moveWidget(input: MoveWidgetInput!): MoveWidgetPayload!
  addToolbarAction(input: AddToolbarActionInput!): AddToolbarActionPayload!
  deleteToolbarAction(input: DeleteToolbarActionInput!): DeleteToolbarActionPayload!
  moveToolbarAction(input: MoveToolbarActionInput!): MoveToolbarActionPayload!
  addPage(input: AddPageInput!): AddPagePayload!
  movePage(input: MovePageInput!): MovePagePayload!
  deletePage(input: DeletePageInput!): DeletePagePayload!
}

input AddGroupInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  pageId: ID!
  index: Int!
}

union AddGroupPayload = SuccessPayload | ErrorPayload

input DeleteGroupInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  groupId: String!
}

union DeleteGroupPayload = SuccessPayload | ErrorPayload

input MoveGroupInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  pageId: String!
  groupId: String!
  index: Int!
}

union MoveGroupPayload = SuccessPayload | ErrorPayload

input AddWidgetInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  containerId: ID!
  kind: String!
  index: Int!
}

union AddWidgetPayload = SuccessPayload | ErrorPayload

input DeleteWidgetInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  widgetId: String!
}

union DeleteWidgetPayload = SuccessPayload | ErrorPayload

input MoveWidgetInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  containerId: ID
  widgetId: String!
  index: Int!
}

union MoveWidgetPayload = SuccessPayload | ErrorPayload

input AddToolbarActionInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  containerId: ID!
}

union AddToolbarActionPayload = SuccessPayload | ErrorPayload

input DeleteToolbarActionInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  toolbarActionId: String!
}

union DeleteToolbarActionPayload = SuccessPayload | ErrorPayload

input MoveToolbarActionInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  containerId: ID
  toolbarActionId: String!
  index: Int!
}

union MoveToolbarActionPayload = SuccessPayload | ErrorPayload

input AddPageInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  index: Int!
}

union AddPagePayload = SuccessPayload | ErrorPayload

input MovePageInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  pageId: String!
  index: Int!
}

union MovePagePayload = SuccessPayload | ErrorPayload

input DeletePageInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  pageId: String!
}

union DeletePagePayload = SuccessPayload | ErrorPayload
