extend type Subscription {
  tableEvent(input: TableEventInput!): TableEventPayload!
}

input TableEventInput {
  id: ID!
  representationId: ID!
  editingContextId: ID!
}

union TableEventPayload = ErrorPayload | TableRefreshedEventPayload

type TableRefreshedEventPayload {
  id: ID!
  table: Table!
}

type Table implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  targetObjectId: ID!
  targetObjectKind: String!
  stripeRow: Boolean!
  columns: [Column!]!
  lines: [Line!]!
}

type Column {
  id: ID!
  targetObjectId: ID!
  targetObjectKind: String!
  headerLabel: String!
  headerIconURLs: [String!]!
  headerIndexLabel: String!
  width: Int!
  isResizable: Boolean!
}

type Line {
  id: ID!
  targetObjectId: ID!
  targetObjectKind: String!
  cells: [Cell!]!
  headerLabel: String!
  headerIconURLs: [String!]!
  headerIndexLabel: String!
}

interface Cell {
  id: ID!
  columnId: ID!
  targetObjectId: ID!
  targetObjectKind: String!
}

type TextfieldCell implements Cell {
  id: ID!
  columnId: ID!
  targetObjectId: ID!
  targetObjectKind: String!
  value: String!
}

type SelectCell implements Cell {
  id: ID!
  columnId: ID!
  targetObjectId: ID!
  targetObjectKind: String!
  options: [SelectCellOption!]!
  value: String!
}

type MultiSelectCell implements Cell {
  id: ID!
  columnId: ID!
  targetObjectId: ID!
  targetObjectKind: String!
  options: [SelectCellOption!]!
  values: [String]!
}

type SelectCellOption {
  id: ID!
  label: String!
}

type CheckboxCell implements Cell {
  id: ID!
  columnId: ID!
  targetObjectId: ID!
  targetObjectKind: String!
  value: Boolean!
}

type IconLabelCell implements Cell {
  id: ID!
  columnId: ID!
  targetObjectId: ID!
  targetObjectKind: String!
  value: String!
  iconURLs: [String!]!
}

type TableDescription implements RepresentationDescription {
  id: ID!
  label: String!
}

extend type Mutation {
  editCheckboxCell(input: EditCheckboxCellInput!): EditCheckboxCellPayload!
  editSelectCell(input: EditSelectCellInput!): EditSelectCellPayload!
  editMultiSelectCell(input: EditMultiSelectCellInput!): EditMultiSelectCellPayload!
  editTextfieldCell(input: EditTextfieldCellInput!): EditTextfieldCellPayload!
  resizeTableColumn(input: ResizeTableColumnInput!): ResizeTableColumnPayload!
}

input EditCheckboxCellInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  tableId: ID!
  cellId: ID!
  newValue: Boolean!
}

union EditCheckboxCellPayload = ErrorPayload | SuccessPayload

input EditSelectCellInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  tableId: ID!
  cellId: ID!
  newValue: String!
}

union EditSelectCellPayload = ErrorPayload | SuccessPayload

input EditMultiSelectCellInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  tableId: ID!
  cellId: ID!
  newValues: [String]!
}

union EditMultiSelectCellPayload = ErrorPayload | SuccessPayload

input EditTextfieldCellInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  tableId: ID!
  cellId: ID!
  newValue: String!
}

union EditTextfieldCellPayload = ErrorPayload | SuccessPayload

input ResizeTableColumnInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  tableId: ID!
  columnId: ID!
  width: Int
}

union ResizeTableColumnPayload = ErrorPayload | SuccessPayload
