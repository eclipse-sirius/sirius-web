extend type Subscription {
  treeEvent(input: TreeEventInput!): TreeEventPayload!
}

input TreeEventInput {
  id: ID!
  representationId: String!
  editingContextId: ID!
}

extend type EditingContext {
  treePath(treeId: ID!, selectionEntryIds: [ID!]!): TreePath!
  expandAllTreePath(treeId: ID!, treeItemId: ID!): TreePath!
}

type TreePath {
  treeItemIdsToExpand: [ID!]!
  maxDepth: Int!
}

union TreeEventPayload = ErrorPayload | TreeRefreshedEventPayload

type TreeRefreshedEventPayload {
  id: ID!
  tree: Tree!
}

type Tree implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  children: [TreeItem!]!
}

type TreeItem {
  id: ID!
  label: StyledString!
  kind: String!
  iconURL: [String!]!
  editable: Boolean!
  deletable: Boolean!
  selectable: Boolean!
  expanded: Boolean!
  hasChildren: Boolean!
  children: [TreeItem]!
}

type StyledString {
  styledStringFragments: [StyledStringFragment]!
}

type StyledStringFragment {
  text: String!
  styledStringFragmentStyle : StyledStringFragmentStyle
}
 
type StyledStringFragmentStyle {
  isStruckOut: Boolean
  underlineStyle: UnderLineStyle
  borderStyle: BorderStyle
  font: String
  backgroundColor: String
  foregroundColor: String
  strikeoutColor: String
  underlineColor: String
  borderColor: String
  isBold: Boolean
  isItalic: Boolean
}

enum UnderLineStyle {
  NONE
  HIDDEN
  DOTTED
  DASHED
  SOLID
  DOUBLE
  GROOVE
  RIDGE
  INSET
  OUTSET
}

enum BorderStyle {
  NONE
  SOLID
  DOTTED
  DASHED
  DOUBLE
  GROOVE
  RIGE
  INSET
  OUTSET
}

type TreeDescription implements RepresentationDescription {
  id: ID!
  label: String!
  initialDirectEditTreeItemLabel(treeItemId: ID!): String!
  filters: [TreeFilter!]!
}

type TreeFilter {
  id: ID!
  label: String!
  defaultState: Boolean!
}

extend type Mutation {
  deleteTreeItem(input: DeleteTreeItemInput!): DeleteTreeItemPayload
  renameTreeItem(input: RenameTreeItemInput!): RenameTreeItemPayload
}

input DeleteTreeItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  treeItemId: ID!
}

union DeleteTreeItemPayload = SuccessPayload | ErrorPayload

input RenameTreeItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  treeItemId: ID!
  newLabel: String!
}

union RenameTreeItemPayload = SuccessPayload | ErrorPayload
