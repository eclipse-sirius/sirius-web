extend type Subscription {
  treeEvent(input: TreeEventInput!): TreeEventPayload!
}

extend type EditingContext {
  treePath(treeId: ID!, selectionEntryIds: [ID!]!): TreePath!
  expandAllTreePath(treeId: ID!, treeItemId: ID!): TreePath!
}

type TreePath {
  treeItemIdsToExpand: [ID!]!
  maxDepth: Int!
}

input TreeEventInput {
  id: ID!
  treeId: String!
  editingContextId: ID!
  expanded: [String!]!
}

union TreeEventPayload = ErrorPayload | SubscribersUpdatedEventPayload | TreeRefreshedEventPayload

type TreeRefreshedEventPayload {
  id: ID!
  tree: Tree!
}

type Tree implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  children: [TreeItem!]!
}

type TreeItem {
  id: ID!
  label: String!
  kind: String!
  imageURL: String!
  editable: Boolean!
  deletable: Boolean!
  expanded: Boolean!
  hasChildren: Boolean!
  children: [TreeItem]!
}

type TreeDescription implements RepresentationDescription {
  id: ID!
  label: String!
  initialDirectEditTreeItemLabel(treeItemId: ID!): String!
}

extend type Mutation {
  deleteTreeItem(input: DeleteTreeItemInput!): DeleteTreeItemPayload
  renameTreeItem(input: RenameTreeItemInput!): RenameTreeItemPayload
}

input DeleteTreeItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  treeItemId: ID!
}

union DeleteTreeItemPayload = SuccessPayload | ErrorPayload

input RenameTreeItemInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  treeItemId: ID!
  newLabel: String!
}

union RenameTreeItemPayload = SuccessPayload | ErrorPayload
