extend type Viewer {
  project(projectId: ID!): Project
  projects(after: String, before: String, first: Int, last: Int, filter: ProjectFilter): ViewerProjectsConnection!
  projectTemplates(page: Int!, limit: Int!): ViewerProjectTemplatesConnection!
}

input ProjectFilter {
  name: StringFilterOperation
}

input StringFilterOperation {
  contains: String
}

type ViewerProjectsConnection {
  edges: [ViewerProjectsEdge!]!
  pageInfo: PageInfo!
}

type ViewerProjectsEdge {
  node: Project!
  cursor: String!
}

type Project {
  id: ID!
  name: String!
  currentEditingContext(name: ID): EditingContext
  natures: [Nature!]!
}

type Nature {
  name: String!
}

type ViewerProjectTemplatesConnection {
  edges: [ViewerProjectTemplatesEdge!]!
  pageInfo: PageInfo!
}

type ViewerProjectTemplatesEdge {
  node: ProjectTemplate!
}

type ProjectTemplate {
  id: ID!
  label: String!
  imageURL: String!
}

extend type EditingContext {
  representations(representationIds: [ID!]): EditingContextRepresentationsConnection!
}

type EditingContextRepresentationsConnection {
  edges: [EditingContextRepresentationsEdge!]!
  pageInfo: PageInfo!
}

type EditingContextRepresentationsEdge {
  node: RepresentationMetadata!
}

extend type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload!
  createProjectFromTemplate(input: CreateProjectFromTemplateInput!): CreateProjectFromTemplatePayload!
  renameProject(input: RenameProjectInput!): RenameProjectPayload!
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload!
  renameRepresentation(input: RenameRepresentationInput!): RenameRepresentationPayload!
  deleteRepresentation(input: DeleteRepresentationInput!): DeleteRepresentationPayload!
  uploadProject(input: UploadProjectInput!): UploadProjectPayload!
}

input CreateProjectInput {
  id: ID!
  name: String!
  natures: [String!]!
}

union CreateProjectPayload = ErrorPayload | CreateProjectSuccessPayload

type CreateProjectSuccessPayload {
  id: ID!
  project: Project!
}

input CreateProjectFromTemplateInput {
  id: ID!
  templateId: ID!
}

union CreateProjectFromTemplatePayload = ErrorPayload | CreateProjectFromTemplateSuccessPayload

type CreateProjectFromTemplateSuccessPayload {
  id: ID!
  project: Project!
  representationToOpen: RepresentationMetadata
}

input RenameProjectInput {
  id: ID!
  projectId: ID!
  newName: String!
}

union RenameProjectPayload = ErrorPayload | RenameProjectSuccessPayload

type RenameProjectSuccessPayload {
  id: ID!
}

input DeleteProjectInput {
  id: ID!
  projectId: ID!
}

union DeleteProjectPayload = ErrorPayload | SuccessPayload

extend type Subscription {
  projectEvent(input: ProjectEventInput!): ProjectEventPayload!
}

input ProjectEventInput {
  id: ID!
  projectId: ID!
}

union ProjectEventPayload = ErrorPayload | ProjectRenamedEventPayload

type ProjectRenamedEventPayload {
  id: ID!
  projectId: ID!
  newName: String!
}

input RenameRepresentationInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  newLabel: String!
}

union RenameRepresentationPayload = ErrorPayload | SuccessPayload

type RenameRepresentationSuccessPayload {
  id: ID!
  representation: Representation!
}

input DeleteRepresentationInput {
  id: ID!
  representationId: ID!
}

union DeleteRepresentationPayload = ErrorPayload | DeleteRepresentationSuccessPayload

type DeleteRepresentationSuccessPayload {
  id: ID!
  representationId: ID!
}

input UploadProjectInput {
  id: ID!
  file: Upload!
}

union UploadProjectPayload = ErrorPayload | UploadProjectSuccessPayload

type UploadProjectSuccessPayload {
  id: ID!
  project: Project!
}
