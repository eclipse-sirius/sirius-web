extend interface Viewer {
  project(projectId: ID!): Project
  projects(page: Int): ViewerProjectConnection!
}

type ViewerProjectConnection {
  edges: [ViewerProjectEdge!]!
  pageInfo: PageInfo!
}

type ViewerProjectEdge {
  node: Project!
}

type Project {
  id: ID!
  name: String!
  currentEditingContext: EditingContext!
  customImages: [CustomImage!]!
}

type CustomImage {
  id: ID!
  label: String!
  url: String!
}

type ProjectTemplate {
  id: ID!
  label: String!
  imageURL: String!
}

extend interface Viewer {
  projectTemplates(page: Int, limit: Int): ViewerProjectTemplateConnection!
}

type ViewerProjectTemplateConnection {
  edges: [ViewerProjectTemplateEdge!]!
  pageInfo: PageInfo!
}

type ViewerProjectTemplateEdge {
  node: ProjectTemplate!
}

type User implements Viewer {
  id: ID!
  username: String!
  editingContext(editingContextId: ID!): EditingContext
  project(projectId: ID!): Project
  projects(page: Int): ViewerProjectConnection!
  projectTemplates(page: Int, limit: Int): ViewerProjectTemplateConnection!
}

extend type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload!
  createProjectFromTemplate(input: CreateProjectFromTemplateInput!): CreateProjectFromTemplatePayload!
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload!
  renameProject(input: RenameProjectInput!): RenameProjectPayload!
  uploadProject(input: UploadProjectInput!): UploadProjectPayload!
  createDocument(input: CreateDocumentInput!): CreateDocumentPayload!
  renameDocument(input: RenameDocumentInput!): RenameDocumentPayload!
  uploadDocument(input: UploadDocumentInput!): UploadDocumentPayload!
  deleteDocument(input: DeleteDocumentInput!): DeleteDocumentPayload!
  deleteRepresentation(input: DeleteRepresentationInput!): DeleteRepresentationPayload!
  renameRepresentation(input: RenameRepresentationInput!): RenameRepresentationPayload!
  uploadImage(input: UploadImageInput!): UploadImagePayload!
  renameImage(input: RenameImageInput!): RenameImagePayload!
  deleteImage(input: DeleteImageInput!): DeleteImagePayload!
}

input CreateProjectInput {
  id: ID!
  name: String!
}

union CreateProjectPayload = ErrorPayload | CreateProjectSuccessPayload

type CreateProjectSuccessPayload {
  id: ID!
  project: Project!
}

input CreateProjectFromTemplateInput {
  id: ID!
  templateId: ID!
}

union CreateProjectFromTemplatePayload = ErrorPayload | CreateProjectFromTemplateSuccessPayload

type CreateProjectFromTemplateSuccessPayload {
  id: ID!
  project: Project!
  representationToOpen: RepresentationMetadata
}

input DeleteProjectInput {
  id: ID!
  projectId: ID!
}

union DeleteProjectPayload = ErrorPayload | DeleteProjectSuccessPayload

type DeleteProjectSuccessPayload {
  id: ID!
  viewer: Viewer!
}

input RenameProjectInput {
  id: ID!
  projectId: ID!
  newName: String!
}

union RenameProjectPayload = ErrorPayload | RenameProjectSuccessPayload

type RenameProjectSuccessPayload {
  id: ID!
  project: Project!
}

input UploadProjectInput {
  id: ID!
  file: Upload!
}

union UploadProjectPayload = ErrorPayload | UploadProjectSuccessPayload

type UploadProjectSuccessPayload {
  id: ID!
  project: Project!
}



input CreateDocumentInput {
  editingContextId: ID!
  id: ID!
  name: String!
  stereotypeDescriptionId: ID!
}

union CreateDocumentPayload = ErrorPayload | CreateDocumentSuccessPayload

type CreateDocumentSuccessPayload {
  id: ID!
  document: Document!
}

type Document {
  id: ID!
  name: String!
}

input RenameDocumentInput {
  id: ID!
  documentId: ID!
  newName: String!
}

union RenameDocumentPayload = ErrorPayload | SuccessPayload

input UploadDocumentInput {
  editingContextId: ID!
  file: Upload!
  id: ID!
}

union UploadDocumentPayload = ErrorPayload | UploadDocumentSuccessPayload

type UploadDocumentSuccessPayload {
  id: ID!
}

input DeleteDocumentInput {
  id: ID!
  documentId: ID!
}

union DeleteDocumentPayload = ErrorPayload | SuccessPayload

input DeleteRepresentationInput {
  id: ID!
  representationId: ID!
}

union DeleteRepresentationPayload = ErrorPayload | DeleteRepresentationSuccessPayload

type DeleteRepresentationSuccessPayload {
  id: ID!
  representationId: ID!
}

input RenameRepresentationInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  newLabel: String!
}

union RenameRepresentationPayload = ErrorPayload | RenameRepresentationSuccessPayload

type RenameRepresentationSuccessPayload {
  id: ID!
  representation: Representation!
}

input UploadImageInput {
  id: ID!
  editingContextId: ID
  label: String
  file: Upload!
}

union UploadImagePayload = ErrorPayload | UploadImageSuccessPayload

type UploadImageSuccessPayload {
  id: ID!
  imageId: ID!
}

input RenameImageInput {
  id: ID!
  imageId: ID!
  newLabel: String!
}

union RenameImagePayload = ErrorPayload | SuccessPayload

input DeleteImageInput {
  id: ID!
  imageId: ID!
}

union DeleteImagePayload = ErrorPayload | SuccessPayload
