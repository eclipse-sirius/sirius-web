extend type Subscription {
  ganttEvent(input: GanttEventInput!): GanttEventPayload!
}

input GanttEventInput {
  id: ID!
  editingContextId: ID!
  ganttId: ID!
}

union GanttEventPayload =
    ErrorPayload
  | SubscribersUpdatedEventPayload
  | GanttRefreshedEventPayload

type GanttRefreshedEventPayload {
  id: ID!
  gantt: Gantt!
}

type Gantt implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  targetObjectId: ID!
  tasks: [Task!]!
  columns: [GanttColumn!]!
}

type GanttColumn {
  id: ID!
  displayed : Boolean!
  width: Int!
}

type Task {
  id: ID!
  descriptionId: ID!
  targetObjectId: String!
  targetObjectKind: String!
  targetObjectLabel: String!
  detail: TaskDetail!
  style: TaskStyle
  subTasks: [Task!]
  taskDependencyIds: [String!]
}

scalar Instant

type TaskDetail {
  name: String!
  description: String!
  startTime: Instant
  endTime: Instant
  progress: Int!
  computeStartEndDynamically: Boolean!
  collapsed: Boolean!
}

type TaskStyle {
  labelColor: String!
  backgroundColor: String!
  progressColor: String!
}

enum TaskType {
  TASK
  TASK_GROUP
  MILESTONE
}

extend type Mutation {
  createGanttTask(input: CreateGanttTaskInput!): CreateGanttTaskPayload
  deleteGanttTask(input: DeleteGanttTaskInput!): DeleteGanttTaskPayload
  editGanttTask(input: EditGanttTaskInput!): EditGanttTaskPayload
  dropGanttTask(input: DropGanttTaskInput!): DropGanttTaskPayload
  createGanttTaskDependency(input: CreateGanttTaskDependencyInput!): CreateGanttTaskDependencyPayload
  changeGanttTaskCollapseState(input: ChangeGanttTaskCollapseStateInput!): ChangeGanttTaskCollapseStatePayload
  changeGanttColumn(input: ChangeGanttColumnInput!): ChangeGanttColumnPayload
}

input CreateGanttTaskInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  currentTaskId: ID
}
union CreateGanttTaskPayload = SuccessPayload | ErrorPayload

input DeleteGanttTaskInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  taskId: ID!
}
union DeleteGanttTaskPayload = SuccessPayload | ErrorPayload

input EditGanttTaskDetailInput {
  name: String
  description: String
  type: TaskType
  startTime: String
  endTime: String
  progress: Int
  assignee: String
}

input EditGanttTaskInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  taskId: ID!
  newDetail: EditGanttTaskDetailInput!
}
union EditGanttTaskPayload = SuccessPayload | ErrorPayload

input DropGanttTaskInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  droppedTaskId: ID!
  targetTaskId: ID
  dropIndex: Int!
}
union DropGanttTaskPayload = SuccessPayload | ErrorPayload

input CreateGanttTaskDependencyInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  sourceTaskId: ID!
  targetTaskId: ID!
}
union CreateGanttTaskDependencyPayload = SuccessPayload | ErrorPayload

input ChangeGanttTaskCollapseStateInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  taskId: ID!
  collapsed: Boolean!
}
union ChangeGanttTaskCollapseStatePayload = SuccessPayload | ErrorPayload

input ChangeGanttColumnInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  columnId: ID!
  displayed: Boolean!
  width: Int!
}
union ChangeGanttColumnPayload = SuccessPayload | ErrorPayload
