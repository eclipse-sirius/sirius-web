/*******************************************************************************
 * Copyright (c) 2024 Obeo.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.sirius.components.papaya.spec;

import java.util.List;
import java.util.stream.Stream;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.EcoreEList;
import org.eclipse.sirius.components.papaya.Class;
import org.eclipse.sirius.components.papaya.PapayaPackage;
import org.eclipse.sirius.components.papaya.impl.ClassImpl;
import org.eclipse.sirius.components.papaya.spec.derived.TypeIsSetQualifiedNamePredicate;
import org.eclipse.sirius.components.papaya.spec.derived.TypeQualifiedNameProvider;

/**
 * Customization of the class implementation generated by EMF.
 *
 * @author sbegaudeau
 */
public class ClassSpec extends ClassImpl {
    @Override
    public String getQualifiedName() {
        return new TypeQualifiedNameProvider().apply(this);
    }

    @Override
    public boolean isSetQualifiedName() {
        return new TypeIsSetQualifiedNamePredicate().test(this);
    }

    @Override
    public EList<Class> getAllExtendedBy() {
        List<Class> allExtendedBy = this.getExtendedBy().stream()
                .flatMap(extendingClass -> Stream.concat(
                        Stream.of(extendingClass),
                        extendingClass.getAllExtendedBy().stream()
                ))
                .toList();
        return new EcoreEList.UnmodifiableEList<>(this, PapayaPackage.Literals.CLASS__ALL_EXTENDED_BY, allExtendedBy.size(), allExtendedBy.toArray());
    }
}
