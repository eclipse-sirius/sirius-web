/*******************************************************************************
 * Copyright (c) 2024 Obeo.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.sirius.components.papaya.provider.spec;

import java.util.Optional;
import java.util.stream.Collectors;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.sirius.components.papaya.GenericType;
import org.eclipse.sirius.components.papaya.Type;
import org.eclipse.sirius.components.papaya.provider.GenericTypeItemProvider;

/**
 * Customization of the item provider implementation generated by EMF.
 *
 * @author sbegaudeau
 */
public class GenericTypeItemProviderSpec extends GenericTypeItemProvider {
    public GenericTypeItemProviderSpec(AdapterFactory adapterFactory) {
        super(adapterFactory);
    }

    @Override
    public Object getImage(Object object) {
        return this.overlayImage(object, this.getResourceLocator().getImage("full/obj16/GenericType.svg"));
    }

    @Override
    public String getText(Object object) {
        if (object instanceof GenericType genericType) {
            var text = Optional.ofNullable(genericType.getRawType()).map(Type::getName).orElse("");
            if (!genericType.getTypeArguments().isEmpty()) {
                text = text + "<";

                text = text + genericType.getTypeArguments().stream()
                        .map(this::getText)
                        .collect(Collectors.joining(", "));

                text = text + ">";
            }
            return text;
        }
        return super.getText(object);
    }
}
