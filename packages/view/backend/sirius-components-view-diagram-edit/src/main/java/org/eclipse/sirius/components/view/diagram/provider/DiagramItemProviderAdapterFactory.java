/*******************************************************************************
 * Copyright (c) 2021, 2024 Obeo.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.sirius.components.view.diagram.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.sirius.components.view.Operation;
import org.eclipse.sirius.components.view.View;
import org.eclipse.sirius.components.view.ViewPackage;
import org.eclipse.sirius.components.view.diagram.DiagramDescription;
import org.eclipse.sirius.components.view.diagram.DiagramFactory;
import org.eclipse.sirius.components.view.diagram.DiagramPackage;
import org.eclipse.sirius.components.view.diagram.util.DiagramAdapterFactory;
import org.eclipse.sirius.components.view.util.ViewSwitch;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 *
 * @generated
 */
public class DiagramItemProviderAdapterFactory extends DiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This helps manage the child creation extenders. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(DiagramEditPlugin.INSTANCE, DiagramPackage.eNS_URI);

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<>();
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.DiagramDescription} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected DiagramDescriptionItemProvider diagramDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.NodeDescription} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected NodeDescriptionItemProvider nodeDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.EdgeDescription} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected EdgeDescriptionItemProvider edgeDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.ListLayoutStrategyDescription} instances. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected ListLayoutStrategyDescriptionItemProvider listLayoutStrategyDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.FreeFormLayoutStrategyDescription} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected FreeFormLayoutStrategyDescriptionItemProvider freeFormLayoutStrategyDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.LabelDescription} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected LabelDescriptionItemProvider labelDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.InsideLabelDescription} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected InsideLabelDescriptionItemProvider insideLabelDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.OutsideLabelDescription} instances. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected OutsideLabelDescriptionItemProvider outsideLabelDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.InsideLabelStyle} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected InsideLabelStyleItemProvider insideLabelStyleItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.OutsideLabelStyle} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected OutsideLabelStyleItemProvider outsideLabelStyleItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.ConditionalNodeStyle} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected ConditionalNodeStyleItemProvider conditionalNodeStyleItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.ConditionalInsideLabelStyle} instances. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected ConditionalInsideLabelStyleItemProvider conditionalInsideLabelStyleItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.ConditionalOutsideLabelStyle} instances. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected ConditionalOutsideLabelStyleItemProvider conditionalOutsideLabelStyleItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.RectangularNodeStyleDescription} instances. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RectangularNodeStyleDescriptionItemProvider rectangularNodeStyleDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.ImageNodeStyleDescription} instances. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    protected ImageNodeStyleDescriptionItemProvider imageNodeStyleDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.IconLabelNodeStyleDescription} instances. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected IconLabelNodeStyleDescriptionItemProvider iconLabelNodeStyleDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.EdgeStyle}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected EdgeStyleItemProvider edgeStyleItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.ConditionalEdgeStyle} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected ConditionalEdgeStyleItemProvider conditionalEdgeStyleItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.DiagramPalette} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected DiagramPaletteItemProvider diagramPaletteItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.NodePalette}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected NodePaletteItemProvider nodePaletteItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.EdgePalette}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected EdgePaletteItemProvider edgePaletteItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.DeleteTool}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DeleteToolItemProvider deleteToolItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.DropTool}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DropToolItemProvider dropToolItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.EdgeTool}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected EdgeToolItemProvider edgeToolItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.LabelEditTool}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected LabelEditToolItemProvider labelEditToolItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.NodeTool}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected NodeToolItemProvider nodeToolItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.SourceEdgeEndReconnectionTool} instances. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected SourceEdgeEndReconnectionToolItemProvider sourceEdgeEndReconnectionToolItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.TargetEdgeEndReconnectionTool} instances. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected TargetEdgeEndReconnectionToolItemProvider targetEdgeEndReconnectionToolItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.CreateView}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected CreateViewItemProvider createViewItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.DeleteView}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DeleteViewItemProvider deleteViewItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.SelectionDescription} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected SelectionDescriptionItemProvider selectionDescriptionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.DiagramToolSection} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected DiagramToolSectionItemProvider diagramToolSectionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.NodeToolSection} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected NodeToolSectionItemProvider nodeToolSectionItemProvider;
    /**
     * This keeps track of the one adapter used for all
     * {@link org.eclipse.sirius.components.view.diagram.EdgeToolSection} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected EdgeToolSectionItemProvider edgeToolSectionItemProvider;
    /**
     * This keeps track of the one adapter used for all {@link org.eclipse.sirius.components.view.diagram.DropNodeTool}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected DropNodeToolItemProvider dropNodeToolItemProvider;

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    public DiagramItemProviderAdapterFactory() {
        this.supportedTypes.add(IEditingDomainItemProvider.class);
        this.supportedTypes.add(IStructuredItemContentProvider.class);
        this.supportedTypes.add(ITreeItemContentProvider.class);
        this.supportedTypes.add(IItemLabelProvider.class);
        this.supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.DiagramDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDiagramDescriptionAdapter() {
        if (this.diagramDescriptionItemProvider == null) {
            this.diagramDescriptionItemProvider = new DiagramDescriptionItemProvider(this);
        }

        return this.diagramDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.NodeDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createNodeDescriptionAdapter() {
        if (this.nodeDescriptionItemProvider == null) {
            this.nodeDescriptionItemProvider = new NodeDescriptionItemProvider(this);
        }

        return this.nodeDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.EdgeDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createEdgeDescriptionAdapter() {
        if (this.edgeDescriptionItemProvider == null) {
            this.edgeDescriptionItemProvider = new EdgeDescriptionItemProvider(this);
        }

        return this.edgeDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.ListLayoutStrategyDescription}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createListLayoutStrategyDescriptionAdapter() {
        if (this.listLayoutStrategyDescriptionItemProvider == null) {
            this.listLayoutStrategyDescriptionItemProvider = new ListLayoutStrategyDescriptionItemProvider(this);
        }

        return this.listLayoutStrategyDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a
     * {@link org.eclipse.sirius.components.view.diagram.FreeFormLayoutStrategyDescription}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createFreeFormLayoutStrategyDescriptionAdapter() {
        if (this.freeFormLayoutStrategyDescriptionItemProvider == null) {
            this.freeFormLayoutStrategyDescriptionItemProvider = new FreeFormLayoutStrategyDescriptionItemProvider(this);
        }

        return this.freeFormLayoutStrategyDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.LabelDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createLabelDescriptionAdapter() {
        if (this.labelDescriptionItemProvider == null) {
            this.labelDescriptionItemProvider = new LabelDescriptionItemProvider(this);
        }

        return this.labelDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.InsideLabelDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createInsideLabelDescriptionAdapter() {
        if (this.insideLabelDescriptionItemProvider == null) {
            this.insideLabelDescriptionItemProvider = new InsideLabelDescriptionItemProvider(this);
        }

        return this.insideLabelDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.OutsideLabelDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createOutsideLabelDescriptionAdapter() {
        if (this.outsideLabelDescriptionItemProvider == null) {
            this.outsideLabelDescriptionItemProvider = new OutsideLabelDescriptionItemProvider(this);
        }

        return this.outsideLabelDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.InsideLabelStyle}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createInsideLabelStyleAdapter() {
        if (this.insideLabelStyleItemProvider == null) {
            this.insideLabelStyleItemProvider = new InsideLabelStyleItemProvider(this);
        }

        return this.insideLabelStyleItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.OutsideLabelStyle}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createOutsideLabelStyleAdapter() {
        if (this.outsideLabelStyleItemProvider == null) {
            this.outsideLabelStyleItemProvider = new OutsideLabelStyleItemProvider(this);
        }

        return this.outsideLabelStyleItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.ConditionalNodeStyle}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createConditionalNodeStyleAdapter() {
        if (this.conditionalNodeStyleItemProvider == null) {
            this.conditionalNodeStyleItemProvider = new ConditionalNodeStyleItemProvider(this);
        }

        return this.conditionalNodeStyleItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.ConditionalInsideLabelStyle}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createConditionalInsideLabelStyleAdapter() {
        if (this.conditionalInsideLabelStyleItemProvider == null) {
            this.conditionalInsideLabelStyleItemProvider = new ConditionalInsideLabelStyleItemProvider(this);
        }

        return this.conditionalInsideLabelStyleItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.ConditionalOutsideLabelStyle}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createConditionalOutsideLabelStyleAdapter() {
        if (this.conditionalOutsideLabelStyleItemProvider == null) {
            this.conditionalOutsideLabelStyleItemProvider = new ConditionalOutsideLabelStyleItemProvider(this);
        }

        return this.conditionalOutsideLabelStyleItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.RectangularNodeStyleDescription}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRectangularNodeStyleDescriptionAdapter() {
        if (this.rectangularNodeStyleDescriptionItemProvider == null) {
            this.rectangularNodeStyleDescriptionItemProvider = new RectangularNodeStyleDescriptionItemProvider(this);
        }

        return this.rectangularNodeStyleDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.ImageNodeStyleDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createImageNodeStyleDescriptionAdapter() {
        if (this.imageNodeStyleDescriptionItemProvider == null) {
            this.imageNodeStyleDescriptionItemProvider = new ImageNodeStyleDescriptionItemProvider(this);
        }

        return this.imageNodeStyleDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.IconLabelNodeStyleDescription}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createIconLabelNodeStyleDescriptionAdapter() {
        if (this.iconLabelNodeStyleDescriptionItemProvider == null) {
            this.iconLabelNodeStyleDescriptionItemProvider = new IconLabelNodeStyleDescriptionItemProvider(this);
        }

        return this.iconLabelNodeStyleDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.EdgeStyle}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createEdgeStyleAdapter() {
        if (this.edgeStyleItemProvider == null) {
            this.edgeStyleItemProvider = new EdgeStyleItemProvider(this);
        }

        return this.edgeStyleItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.ConditionalEdgeStyle}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createConditionalEdgeStyleAdapter() {
        if (this.conditionalEdgeStyleItemProvider == null) {
            this.conditionalEdgeStyleItemProvider = new ConditionalEdgeStyleItemProvider(this);
        }

        return this.conditionalEdgeStyleItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.DiagramPalette}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDiagramPaletteAdapter() {
        if (this.diagramPaletteItemProvider == null) {
            this.diagramPaletteItemProvider = new DiagramPaletteItemProvider(this);
        }

        return this.diagramPaletteItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.NodePalette}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createNodePaletteAdapter() {
        if (this.nodePaletteItemProvider == null) {
            this.nodePaletteItemProvider = new NodePaletteItemProvider(this);
        }

        return this.nodePaletteItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.EdgePalette}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createEdgePaletteAdapter() {
        if (this.edgePaletteItemProvider == null) {
            this.edgePaletteItemProvider = new EdgePaletteItemProvider(this);
        }

        return this.edgePaletteItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.DeleteTool}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDeleteToolAdapter() {
        if (this.deleteToolItemProvider == null) {
            this.deleteToolItemProvider = new DeleteToolItemProvider(this);
        }

        return this.deleteToolItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.DropTool}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDropToolAdapter() {
        if (this.dropToolItemProvider == null) {
            this.dropToolItemProvider = new DropToolItemProvider(this);
        }

        return this.dropToolItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.EdgeTool}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createEdgeToolAdapter() {
        if (this.edgeToolItemProvider == null) {
            this.edgeToolItemProvider = new EdgeToolItemProvider(this);
        }

        return this.edgeToolItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.LabelEditTool}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createLabelEditToolAdapter() {
        if (this.labelEditToolItemProvider == null) {
            this.labelEditToolItemProvider = new LabelEditToolItemProvider(this);
        }

        return this.labelEditToolItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.NodeTool}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createNodeToolAdapter() {
        if (this.nodeToolItemProvider == null) {
            this.nodeToolItemProvider = new NodeToolItemProvider(this);
        }

        return this.nodeToolItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.SourceEdgeEndReconnectionTool}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createSourceEdgeEndReconnectionToolAdapter() {
        if (this.sourceEdgeEndReconnectionToolItemProvider == null) {
            this.sourceEdgeEndReconnectionToolItemProvider = new SourceEdgeEndReconnectionToolItemProvider(this);
        }

        return this.sourceEdgeEndReconnectionToolItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.TargetEdgeEndReconnectionTool}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createTargetEdgeEndReconnectionToolAdapter() {
        if (this.targetEdgeEndReconnectionToolItemProvider == null) {
            this.targetEdgeEndReconnectionToolItemProvider = new TargetEdgeEndReconnectionToolItemProvider(this);
        }

        return this.targetEdgeEndReconnectionToolItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.CreateView}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createCreateViewAdapter() {
        if (this.createViewItemProvider == null) {
            this.createViewItemProvider = new CreateViewItemProvider(this);
        }

        return this.createViewItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.DeleteView}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDeleteViewAdapter() {
        if (this.deleteViewItemProvider == null) {
            this.deleteViewItemProvider = new DeleteViewItemProvider(this);
        }

        return this.deleteViewItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.SelectionDescription}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createSelectionDescriptionAdapter() {
        if (this.selectionDescriptionItemProvider == null) {
            this.selectionDescriptionItemProvider = new SelectionDescriptionItemProvider(this);
        }

        return this.selectionDescriptionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.DiagramToolSection}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDiagramToolSectionAdapter() {
        if (this.diagramToolSectionItemProvider == null) {
            this.diagramToolSectionItemProvider = new DiagramToolSectionItemProvider(this);
        }

        return this.diagramToolSectionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.NodeToolSection}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createNodeToolSectionAdapter() {
        if (this.nodeToolSectionItemProvider == null) {
            this.nodeToolSectionItemProvider = new NodeToolSectionItemProvider(this);
        }

        return this.nodeToolSectionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.EdgeToolSection}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createEdgeToolSectionAdapter() {
        if (this.edgeToolSectionItemProvider == null) {
            this.edgeToolSectionItemProvider = new EdgeToolSectionItemProvider(this);
        }

        return this.edgeToolSectionItemProvider;
    }

    /**
     * This creates an adapter for a {@link org.eclipse.sirius.components.view.diagram.DropNodeTool}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createDropNodeToolAdapter() {
        if (this.dropNodeToolItemProvider == null) {
            this.dropNodeToolItemProvider = new DropNodeToolItemProvider(this);
        }

        return this.dropNodeToolItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return this.supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (this.isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    public List<IChildCreationExtender> getChildCreationExtenders() {
        return this.childCreationExtenderManager.getChildCreationExtenders();
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
        return this.childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public ResourceLocator getResourceLocator() {
        return this.childCreationExtenderManager;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void addListener(INotifyChangedListener notifyChangedListener) {
        this.changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        this.changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    @Override
    public void fireNotifyChanged(Notification notification) {
        this.changeNotifier.fireNotifyChanged(notification);

        if (this.parentAdapterFactory != null) {
            this.parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void dispose() {
        if (this.diagramDescriptionItemProvider != null)
            this.diagramDescriptionItemProvider.dispose();
        if (this.nodeDescriptionItemProvider != null)
            this.nodeDescriptionItemProvider.dispose();
        if (this.edgeDescriptionItemProvider != null)
            this.edgeDescriptionItemProvider.dispose();
        if (this.listLayoutStrategyDescriptionItemProvider != null)
            this.listLayoutStrategyDescriptionItemProvider.dispose();
        if (this.freeFormLayoutStrategyDescriptionItemProvider != null)
            this.freeFormLayoutStrategyDescriptionItemProvider.dispose();
        if (this.labelDescriptionItemProvider != null)
            this.labelDescriptionItemProvider.dispose();
        if (this.insideLabelDescriptionItemProvider != null)
            this.insideLabelDescriptionItemProvider.dispose();
        if (this.outsideLabelDescriptionItemProvider != null)
            this.outsideLabelDescriptionItemProvider.dispose();
        if (this.insideLabelStyleItemProvider != null)
            this.insideLabelStyleItemProvider.dispose();
        if (this.outsideLabelStyleItemProvider != null)
            this.outsideLabelStyleItemProvider.dispose();
        if (this.conditionalNodeStyleItemProvider != null)
            this.conditionalNodeStyleItemProvider.dispose();
        if (this.conditionalInsideLabelStyleItemProvider != null)
            this.conditionalInsideLabelStyleItemProvider.dispose();
        if (this.conditionalOutsideLabelStyleItemProvider != null)
            this.conditionalOutsideLabelStyleItemProvider.dispose();
        if (this.rectangularNodeStyleDescriptionItemProvider != null)
            this.rectangularNodeStyleDescriptionItemProvider.dispose();
        if (this.imageNodeStyleDescriptionItemProvider != null)
            this.imageNodeStyleDescriptionItemProvider.dispose();
        if (this.iconLabelNodeStyleDescriptionItemProvider != null)
            this.iconLabelNodeStyleDescriptionItemProvider.dispose();
        if (this.edgeStyleItemProvider != null)
            this.edgeStyleItemProvider.dispose();
        if (this.conditionalEdgeStyleItemProvider != null)
            this.conditionalEdgeStyleItemProvider.dispose();
        if (this.diagramPaletteItemProvider != null)
            this.diagramPaletteItemProvider.dispose();
        if (this.nodePaletteItemProvider != null)
            this.nodePaletteItemProvider.dispose();
        if (this.edgePaletteItemProvider != null)
            this.edgePaletteItemProvider.dispose();
        if (this.deleteToolItemProvider != null)
            this.deleteToolItemProvider.dispose();
        if (this.dropToolItemProvider != null)
            this.dropToolItemProvider.dispose();
        if (this.edgeToolItemProvider != null)
            this.edgeToolItemProvider.dispose();
        if (this.labelEditToolItemProvider != null)
            this.labelEditToolItemProvider.dispose();
        if (this.nodeToolItemProvider != null)
            this.nodeToolItemProvider.dispose();
        if (this.sourceEdgeEndReconnectionToolItemProvider != null)
            this.sourceEdgeEndReconnectionToolItemProvider.dispose();
        if (this.targetEdgeEndReconnectionToolItemProvider != null)
            this.targetEdgeEndReconnectionToolItemProvider.dispose();
        if (this.createViewItemProvider != null)
            this.createViewItemProvider.dispose();
        if (this.deleteViewItemProvider != null)
            this.deleteViewItemProvider.dispose();
        if (this.selectionDescriptionItemProvider != null)
            this.selectionDescriptionItemProvider.dispose();
        if (this.diagramToolSectionItemProvider != null)
            this.diagramToolSectionItemProvider.dispose();
        if (this.nodeToolSectionItemProvider != null)
            this.nodeToolSectionItemProvider.dispose();
        if (this.edgeToolSectionItemProvider != null)
            this.edgeToolSectionItemProvider.dispose();
        if (this.dropNodeToolItemProvider != null)
            this.dropNodeToolItemProvider.dispose();
    }

    /**
     * A child creation extender for the {@link ViewPackage}. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    public static class ViewChildCreationExtender implements IChildCreationExtender {

        /**
         * <!-- begin-user-doc --> <!-- end-user-doc -->
         *
         * @generated
         */
        @Override
        public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
            ArrayList<Object> result = new ArrayList<>();
            new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
            return result;
        }

        /**
         * <!-- begin-user-doc --> <!-- end-user-doc -->
         *
         * @generated
         */
        @Override
        public ResourceLocator getResourceLocator() {
            return DiagramEditPlugin.INSTANCE;
        }

        /**
         * The switch for creating child descriptors specific to each extended class. <!-- begin-user-doc --> <!--
         * end-user-doc -->
         *
         * @generated
         */
        protected static class CreationSwitch extends ViewSwitch<Object> {

            /**
             * The child descriptors being populated. <!-- begin-user-doc --> <!-- end-user-doc -->
             *
             * @generated
             */
            protected List<Object> newChildDescriptors;

            /**
             * The domain in which to create the children. <!-- begin-user-doc --> <!-- end-user-doc -->
             *
             * @generated
             */
            protected EditingDomain editingDomain;

            /**
             * Creates the a switch for populating child descriptors in the given domain. <!-- begin-user-doc --> <!--
             * end-user-doc -->
             *
             * @generated
             */
            CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
                this.newChildDescriptors = newChildDescriptors;
                this.editingDomain = editingDomain;
            }

            /**
             * <!-- begin-user-doc --> <!-- end-user-doc -->
             *
             * @generated NOT
             */
            @Override
            public Object caseView(View object) {
                DiagramDescription newDiagramDescription = DiagramFactory.eINSTANCE.createDiagramDescription();
                newDiagramDescription.setName("New Diagram Description");
                newDiagramDescription.setPalette(new DefaultToolsFactory().createDefaultDiagramPalette());
                this.newChildDescriptors.add(this.createChildParameter(ViewPackage.Literals.VIEW__DESCRIPTIONS, newDiagramDescription));

                return null;
            }

            /**
             * <!-- begin-user-doc --> <!-- end-user-doc -->
             *
             * @generated
             */
            @Override
            public Object caseOperation(Operation object) {
                this.newChildDescriptors.add(this.createChildParameter(ViewPackage.Literals.OPERATION__CHILDREN, DiagramFactory.eINSTANCE.createCreateView()));

                this.newChildDescriptors.add(this.createChildParameter(ViewPackage.Literals.OPERATION__CHILDREN, DiagramFactory.eINSTANCE.createDeleteView()));

                return null;
            }

            /**
             * <!-- begin-user-doc --> <!-- end-user-doc -->
             *
             * @generated
             */
            protected CommandParameter createChildParameter(Object feature, Object child) {
                return new CommandParameter(null, feature, child);
            }

        }
    }

}
