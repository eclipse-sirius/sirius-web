name: Continuous integration

on:
  push:
    paths-ignore:
      - "doc/**"
    branches:
      - "**"
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node SDK
        uses: actions/setup-node@v3
        with:
          node-version: 18.7
          registry-url: https://npm.pkg.github.com/

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - name: Setup Java SDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11

      - name: Setup some global environment variables
        run: |
          echo "git_describe=$(git describe)" >> $GITHUB_ENV

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build the frontend packages
        run: |
          npm install -g yalc
          npm ci
          npx turbo run coverage
          npx turbo run publish:local

      - name: Copy frontend artifacts
        run: |
          mkdir -p packages/sirius-web/backend/sirius-web-frontend/src/main/resources/static
          cp -R packages/sirius-web/frontend/sirius-web/dist/* packages/sirius-web/backend/sirius-web-frontend/src/main/resources/static

      - name: Build the backend
        env:
          USERNAME: ${{github.actor}}
          PASSWORD: ${{secrets.GITHUB_TOKEN}}
        run: mvn -U -B -e clean verify -f packages/pom.xml --settings settings.xml

      - name: Build the vscode extension
        run: |
          npm install -g vsce
          npx yalc add @eclipse-sirius/sirius-components-core
          npx yalc add @eclipse-sirius/sirius-components-diagrams
          npx yalc add @eclipse-sirius/sirius-components-forms
          npx yalc add @eclipse-sirius/sirius-components-selection
          npx yalc add @eclipse-sirius/sirius-components-charts
          npm i
          npm run compile
          vsce package
        working-directory: vscode-extension

      - name: Store the vscode extension
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: vscode
          path: vscode-extension/sirius-web-2022.11.3.vsix
          retention-days: 20

      - name: Store code coverage results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: jacoco
          path: packages/releng/backend/sirius-components-test-coverage/target/site/jacoco-aggregate
          retention-days: 5

      - name: Store Core frontend code coverage results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: core
          path: packages/core/frontend/sirius-components-core/coverage
          retention-days: 5

      - name: Store FormDescriptionEditors frontend code coverage results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: formdescriptioneditors
          path: packages/formdescriptioneditors/frontend/sirius-components-formdescriptioneditors/coverage
          retention-days: 5

      - name: Store Forms frontend code coverage results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: forms
          path: packages/forms/frontend/sirius-components-forms/coverage
          retention-days: 5

      - name: Store Trees frontend code coverage results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: trees
          path: packages/trees/frontend/sirius-components-trees/coverage
          retention-days: 5

      - name: Check the global code coverage
        run: jshell scripts/check-coverage.jsh

      - name: Publish the backend
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: mvn -B -X deploy -f packages/pom.xml

      - name: Publish the frontend packages
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          npm publish --workspaces
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Configure AWS CLI for Sirius Web
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Login to Amazon Elastic Container Registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build the Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: sirius-web
          IMAGE_TAG: ${{ env.git_describe }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG packages/sirius-web/backend/sirius-web-sample-application

      - name: Upload the Docker image to AWS ECR
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: sirius-web
          IMAGE_TAG: ${{ env.git_describe }}
        run: |
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Upload the Docker configuration for AWS Elastic Beanstalk
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: sirius-web
          IMAGE_TAG: ${{ env.git_describe }}
        run: |
          sed -e "s|IMAGE_NAME|$REGISTRY/$REPOSITORY:$IMAGE_TAG|" Dockerrun.aws.json.template > Dockerrun.aws.json
          aws s3 cp Dockerrun.aws.json s3://sirius-web-deployment/integration/${{ env.git_describe }}/Dockerrun.aws.json
