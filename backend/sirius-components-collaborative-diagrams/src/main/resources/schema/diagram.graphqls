extend type Subscription {
  diagramEvent(input: DiagramEventInput!): DiagramEventPayload!
}

input DiagramEventInput {
  id: ID!
  editingContextId: ID!
  diagramId: ID!
}

union DiagramEventPayload = ErrorPayload | SubscribersUpdatedEventPayload | DiagramRefreshedEventPayload

type DiagramRefreshedEventPayload {
  id: ID!
  diagram: Diagram!
}

type Diagram implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  targetObjectId: ID!
  autoLayout: Boolean!
  size: Size!
  position: Position!
  nodes: [Node!]!
  edges: [Edge!]!
}

type Node {
  id: ID!
  label: Label!
  descriptionId: ID!
  type: String!
  targetObjectId: String!
  targetObjectKind: String!
  targetObjectLabel: String!
  size: Size!
  position: Position!
  style: INodeStyle!
  borderNodes: [Node!]!
  childNodes: [Node!]!
}

type Label {
  id: ID!
  text: String!
  type: String!
  style: LabelStyle!
  alignment: Position!
  position: Position!
  size: Size!
}

type LabelStyle {
  bold: Boolean!
  color: String!
  fontSize: Int!
  iconURL: String!
  italic: Boolean!
  strikeThrough: Boolean!
  underline: Boolean!
}

union INodeStyle = ImageNodeStyle | ListItemNodeStyle | ListNodeStyle | RectangularNodeStyle

type ImageNodeStyle {
  imageURL: String!
  borderColor: String!
  borderRadius: Int!
  borderSize: Int!
  borderStyle: LineStyle!
}

type ListNodeStyle {
  borderColor: String!
  borderRadius: Int!
  borderSize: Int!
  borderStyle: LineStyle!
  color: String!
}

type ListItemNodeStyle {
  backgroundColor: String!
}

type RectangularNodeStyle {
  borderColor: String!
  borderRadius: Int!
  borderSize: Int!
  borderStyle: LineStyle!
  color: String!
}

enum LineStyle {
  Dash
  Dash_Dot
  Dot
  Solid
}

type Edge {
  id: ID!
  descriptionId: ID!
  type: String!
  beginLabel: Label
  centerLabel: Label
  endLabel: Label
  sourceId: ID!
  targetId: ID!
  targetObjectId: String!
  targetObjectKind: String!
  targetObjectLabel: String!
  style: EdgeStyle!
  routingPoints: [Position]!
  sourceAnchorRelativePosition: Ratio!
  targetAnchorRelativePosition: Ratio!
}

type EdgeStyle {
  color: String!
  lineStyle: LineStyle!
  size: Int!
  sourceArrow: ArrowStyle!
  targetArrow: ArrowStyle!
}

enum ArrowStyle {
  Diamond
  FillDiamond
  InputArrow
  InputArrowWithDiamond
  InputArrowWithFillDiamond
  InputClosedArrow
  InputFillClosedArrow
  None
  OutputArrow
  OutputClosedArrow
  OutputFillClosedArrow
}

type Ratio {
  x: Float!
  y: Float!
}

type Position {
  x: Float!
  y: Float!
}

type Size {
  height: Float!
  width: Float!
}

type ToolSection {
  id: ID!
  label: String!
  imageURL: String!
  tools: [Tool]!
}

interface Tool {
  id: ID!
  label: String!
  imageURL: String!
}

type SingleClickOnDiagramElementTool implements Tool {
  id: ID!
  label: String!
  imageURL: String!
  appliesToDiagramRoot: Boolean!
  selectionDescriptionId: String
  targetDescriptions: [NodeDescription!]!
}

type SingleClickOnTwoDiagramElementsTool implements Tool {
  id: ID!
  label: String!
  imageURL: String!
  candidates: [SingleClickOnTwoDiagramElementsCandidate]!
}

type SingleClickOnTwoDiagramElementsCandidate {
  sources: [NodeDescription!]!
  targets: [NodeDescription!]!
}

type DiagramDescription implements RepresentationDescription {
  id: ID!
  label: String!
  autoLayout: Boolean!
  nodeDescriptions: [NodeDescription!]!
  edgeDescriptions: [EdgeDescription!]!
  toolSections(diagramElementId: ID!): [ToolSection!]
  connectorTools(sourceDiagramElementId: ID!, targetDiagramElementId: ID!): [Tool!]!
}

type NodeDescription {
  id: ID!
  synchronizationPolicy: SynchronizationPolicy!
  borderNodeDescriptions: [NodeDescription!]!
  childNodeDescriptions: [NodeDescription!]!
}

type EdgeDescription {
  id: ID!
  synchronizationPolicy: SynchronizationPolicy!
  sourceNodeDescriptions: [NodeDescription!]!
  targetNodeDescriptions: [NodeDescription!]!
}

enum SynchronizationPolicy {
  SYNCHRONIZED
  UNSYNCHRONIZED
}

extend type Mutation {
  arrangeAll(input: ArrangeAllInput!): ArrangeAllPayload!
  deleteFromDiagram(input: DeleteFromDiagramInput!): DeleteFromDiagramPayload!
  editLabel(input: EditLabelInput!): EditLabelPayload!
  invokeSingleClickOnDiagramElementTool(input: InvokeSingleClickOnDiagramElementToolInput!): InvokeSingleClickOnDiagramElementToolPayload!
  invokeSingleClickOnTwoDiagramElementsTool(input: InvokeSingleClickOnTwoDiagramElementsToolInput!): InvokeSingleClickOnTwoDiagramElementsToolPayload!
  updateNodeBounds(input: UpdateNodeBoundsInput!): UpdateNodeBoundsPayload!
  updateNodePosition(input: UpdateNodePositionInput!): UpdateNodePositionPayload!
  dropOnDiagram(input: DropOnDiagramInput!): DropOnDiagramPayload!
  updateEdgeRoutingPoints(input: UpdateEdgeRoutingPointsInput!): UpdateEdgeRoutingPointsPayload!
}

input ArrangeAllInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
}

union ArrangeAllPayload = ArrangeAllSuccessPayload | ErrorPayload

type ArrangeAllSuccessPayload {
  id: ID!
}

input DeleteFromDiagramInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  nodeIds: [ID!]!
  edgeIds: [ID!]!
  deletionPolicy: DeletionPolicy!
}

enum DeletionPolicy {
  SEMANTIC
  GRAPHICAL
}

union DeleteFromDiagramPayload = ErrorPayload | DeleteFromDiagramSuccessPayload

type DeleteFromDiagramSuccessPayload {
  id: ID!
  diagram: Diagram!
}

input EditLabelInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  labelId: ID!
  newText: String!
}

union EditLabelPayload = ErrorPayload|EditLabelSuccessPayload

type EditLabelSuccessPayload {
  id: ID!
  diagram: Diagram!
}

input InvokeSingleClickOnTwoDiagramElementsToolInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  toolId: ID!
  diagramSourceElementId: ID!
  diagramTargetElementId: ID!
  sourcePositionX: Float!
  sourcePositionY: Float!
  targetPositionX: Float!
  targetPositionY: Float!
}

union InvokeSingleClickOnTwoDiagramElementsToolPayload = ErrorPayload | InvokeSingleClickOnTwoDiagramElementsToolSuccessPayload

type InvokeSingleClickOnTwoDiagramElementsToolSuccessPayload {
  id: ID!
  newSelection: WorkbenchSelection
}

input InvokeSingleClickOnDiagramElementToolInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  selectedObjectId: String
  diagramElementId: ID!
  startingPositionX: Float!
  startingPositionY: Float!
  toolId: ID!
}

union InvokeSingleClickOnDiagramElementToolPayload = ErrorPayload | InvokeSingleClickOnDiagramElementToolSuccessPayload

type InvokeSingleClickOnDiagramElementToolSuccessPayload {
  id: ID!
  newSelection: WorkbenchSelection
}

input UpdateNodeBoundsInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  diagramElementId: ID!
  newHeight: Float!
  newPositionX: Float!
  newPositionY: Float!
  newWidth: Float!
}

union UpdateNodeBoundsPayload = ErrorPayload | UpdateNodeBoundsSuccessPayload

type UpdateNodeBoundsSuccessPayload {
  id: ID!
  diagram: Diagram!
}

input UpdateNodePositionInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  diagramElementId: ID!
  newPositionX: Float!
  newPositionY: Float!
}

union UpdateNodePositionPayload = ErrorPayload | UpdateNodePositionSuccessPayload

type UpdateNodePositionSuccessPayload {
  id: ID!
  diagram: Diagram!
}

input DropOnDiagramInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  diagramTargetElementId: ID
  objectIds: [String!]!
  startingPositionX: Float!
  startingPositionY: Float!
}

union DropOnDiagramPayload = ErrorPayload | DropOnDiagramSuccessPayload

type DropOnDiagramSuccessPayload {
  id: ID!
  diagram: Diagram!
}

input UpdateEdgeRoutingPointsInput {
  id: ID!
  editingContextId: ID!
  representationId: ID!
  diagramElementId: ID!
  routingPoints: [PositionInput]!
}

input PositionInput {
  x: Float!
  y: Float!
}

union UpdateEdgeRoutingPointsPayload = ErrorPayload | UpdateEdgeRoutingPointsSuccessPayload

type UpdateEdgeRoutingPointsSuccessPayload {
  id: ID!
}